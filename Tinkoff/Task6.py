"""
На физкультуре происходит разбиение по двум командам.
Ребята выстроены в шеренгу, у каждого из них есть свой рост a_i.
Разбиение по командам произойдет по принципу «четный-нечетный» —
все школьники с четным ростом отправляются в одну команду, а нечетные — в другую.
В отличие от привычного урока, ребята не выстроились по росту.
Вместо привычного порядка они встали случайно. Теперь физрук Яша смотрит на шеренгу и думает —
может ли ровно одна пара учеников поменяться местами так, чтобы команды оказались такими же,
как и по принципу «первый-второй». Иначе говоря, он хочет получить такой порядок,
при котором все ученики с четным ростом стоят на четных позициях, а с нечетным — на нечетных.
Помогите Яше найти нужную замену.

Формат входных данных
В первой строке находится число n(2≤n≤1000) — количество учеников в шеренге.
В следующей строке находится n натуральных чисел a_i(1<=a_i<=10^9) — рост учеников.

Формат выходных данных
В единственной строке выведите i и j — номера элементов, которые нужно поменять местами,
чтобы добиться заданного условия (1≤i,j≤n,i!=j). Если ответов несколько — разрешается вывести любой.
Если не существует способа поменять два элемента местами — выведите -1 −1.

Замечания
В первом примере хотя бы один ученик с четным ростом будет стоять на нечетной позиции.
Во втором тесте замена приведет к неправильному состоянию.
В третьем тесте из условия замена приведет шеренгу к валидному состоянию [1,2].
"""

n = int(input())
pupils = list(map(int, input().split()))
wrong_pupils = []


def parity(pupils):
    for num, pupil in enumerate(pupils, start=1):
        if pupil % 2 == 0 and num % 2 != 0:
            wrong_pupils.append(num)
            if len(wrong_pupils) > 2:
                return -1, -1
        elif pupil % 2 != 0 and num % 2 == 0:
            wrong_pupils.append(num)
            if len(wrong_pupils) > 2:
                return -1, -1
    if len(wrong_pupils) < 2:
        return -1, -1
    return wrong_pupils


print(*parity(pupils))
